/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UpdateProfileImport } from './routes/update-profile'
import { Route as UnauthorizedImport } from './routes/unauthorized'
import { Route as SettingsImport } from './routes/settings'
import { Route as RegisterImport } from './routes/register'
import { Route as ProfileImport } from './routes/profile'
import { Route as LoginImport } from './routes/login'
import { Route as AddInstrumentImport } from './routes/add-instrument'
import { Route as IndexImport } from './routes/index'
import { Route as PostsIndexImport } from './routes/posts/index'
import { Route as MusiciansIndexImport } from './routes/musicians/index'
import { Route as EnsemblesIndexImport } from './routes/ensembles/index'
import { Route as PostsCreatePostImport } from './routes/posts/create-post'
import { Route as PostsPostIdImport } from './routes/posts/$postId'
import { Route as MusiciansSlugImport } from './routes/musicians/$slug'
import { Route as EnsemblesCreateEnsembleImport } from './routes/ensembles/create-ensemble'
import { Route as EnsemblesEnsembleIdImport } from './routes/ensembles/$ensembleId'

// Create/Update Routes

const UpdateProfileRoute = UpdateProfileImport.update({
  id: '/update-profile',
  path: '/update-profile',
  getParentRoute: () => rootRoute,
} as any)

const UnauthorizedRoute = UnauthorizedImport.update({
  id: '/unauthorized',
  path: '/unauthorized',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AddInstrumentRoute = AddInstrumentImport.update({
  id: '/add-instrument',
  path: '/add-instrument',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRoute,
} as any)

const MusiciansIndexRoute = MusiciansIndexImport.update({
  id: '/musicians/',
  path: '/musicians/',
  getParentRoute: () => rootRoute,
} as any)

const EnsemblesIndexRoute = EnsemblesIndexImport.update({
  id: '/ensembles/',
  path: '/ensembles/',
  getParentRoute: () => rootRoute,
} as any)

const PostsCreatePostRoute = PostsCreatePostImport.update({
  id: '/posts/create-post',
  path: '/posts/create-post',
  getParentRoute: () => rootRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => rootRoute,
} as any)

const MusiciansSlugRoute = MusiciansSlugImport.update({
  id: '/musicians/$slug',
  path: '/musicians/$slug',
  getParentRoute: () => rootRoute,
} as any)

const EnsemblesCreateEnsembleRoute = EnsemblesCreateEnsembleImport.update({
  id: '/ensembles/create-ensemble',
  path: '/ensembles/create-ensemble',
  getParentRoute: () => rootRoute,
} as any)

const EnsemblesEnsembleIdRoute = EnsemblesEnsembleIdImport.update({
  id: '/ensembles/$ensembleId',
  path: '/ensembles/$ensembleId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/add-instrument': {
      id: '/add-instrument'
      path: '/add-instrument'
      fullPath: '/add-instrument'
      preLoaderRoute: typeof AddInstrumentImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/unauthorized': {
      id: '/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof UnauthorizedImport
      parentRoute: typeof rootRoute
    }
    '/update-profile': {
      id: '/update-profile'
      path: '/update-profile'
      fullPath: '/update-profile'
      preLoaderRoute: typeof UpdateProfileImport
      parentRoute: typeof rootRoute
    }
    '/ensembles/$ensembleId': {
      id: '/ensembles/$ensembleId'
      path: '/ensembles/$ensembleId'
      fullPath: '/ensembles/$ensembleId'
      preLoaderRoute: typeof EnsemblesEnsembleIdImport
      parentRoute: typeof rootRoute
    }
    '/ensembles/create-ensemble': {
      id: '/ensembles/create-ensemble'
      path: '/ensembles/create-ensemble'
      fullPath: '/ensembles/create-ensemble'
      preLoaderRoute: typeof EnsemblesCreateEnsembleImport
      parentRoute: typeof rootRoute
    }
    '/musicians/$slug': {
      id: '/musicians/$slug'
      path: '/musicians/$slug'
      fullPath: '/musicians/$slug'
      preLoaderRoute: typeof MusiciansSlugImport
      parentRoute: typeof rootRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof rootRoute
    }
    '/posts/create-post': {
      id: '/posts/create-post'
      path: '/posts/create-post'
      fullPath: '/posts/create-post'
      preLoaderRoute: typeof PostsCreatePostImport
      parentRoute: typeof rootRoute
    }
    '/ensembles/': {
      id: '/ensembles/'
      path: '/ensembles'
      fullPath: '/ensembles'
      preLoaderRoute: typeof EnsemblesIndexImport
      parentRoute: typeof rootRoute
    }
    '/musicians/': {
      id: '/musicians/'
      path: '/musicians'
      fullPath: '/musicians'
      preLoaderRoute: typeof MusiciansIndexImport
      parentRoute: typeof rootRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add-instrument': typeof AddInstrumentRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/update-profile': typeof UpdateProfileRoute
  '/ensembles/$ensembleId': typeof EnsemblesEnsembleIdRoute
  '/ensembles/create-ensemble': typeof EnsemblesCreateEnsembleRoute
  '/musicians/$slug': typeof MusiciansSlugRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/create-post': typeof PostsCreatePostRoute
  '/ensembles': typeof EnsemblesIndexRoute
  '/musicians': typeof MusiciansIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add-instrument': typeof AddInstrumentRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/update-profile': typeof UpdateProfileRoute
  '/ensembles/$ensembleId': typeof EnsemblesEnsembleIdRoute
  '/ensembles/create-ensemble': typeof EnsemblesCreateEnsembleRoute
  '/musicians/$slug': typeof MusiciansSlugRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/create-post': typeof PostsCreatePostRoute
  '/ensembles': typeof EnsemblesIndexRoute
  '/musicians': typeof MusiciansIndexRoute
  '/posts': typeof PostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/add-instrument': typeof AddInstrumentRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/register': typeof RegisterRoute
  '/settings': typeof SettingsRoute
  '/unauthorized': typeof UnauthorizedRoute
  '/update-profile': typeof UpdateProfileRoute
  '/ensembles/$ensembleId': typeof EnsemblesEnsembleIdRoute
  '/ensembles/create-ensemble': typeof EnsemblesCreateEnsembleRoute
  '/musicians/$slug': typeof MusiciansSlugRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/posts/create-post': typeof PostsCreatePostRoute
  '/ensembles/': typeof EnsemblesIndexRoute
  '/musicians/': typeof MusiciansIndexRoute
  '/posts/': typeof PostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/add-instrument'
    | '/login'
    | '/profile'
    | '/register'
    | '/settings'
    | '/unauthorized'
    | '/update-profile'
    | '/ensembles/$ensembleId'
    | '/ensembles/create-ensemble'
    | '/musicians/$slug'
    | '/posts/$postId'
    | '/posts/create-post'
    | '/ensembles'
    | '/musicians'
    | '/posts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/add-instrument'
    | '/login'
    | '/profile'
    | '/register'
    | '/settings'
    | '/unauthorized'
    | '/update-profile'
    | '/ensembles/$ensembleId'
    | '/ensembles/create-ensemble'
    | '/musicians/$slug'
    | '/posts/$postId'
    | '/posts/create-post'
    | '/ensembles'
    | '/musicians'
    | '/posts'
  id:
    | '__root__'
    | '/'
    | '/add-instrument'
    | '/login'
    | '/profile'
    | '/register'
    | '/settings'
    | '/unauthorized'
    | '/update-profile'
    | '/ensembles/$ensembleId'
    | '/ensembles/create-ensemble'
    | '/musicians/$slug'
    | '/posts/$postId'
    | '/posts/create-post'
    | '/ensembles/'
    | '/musicians/'
    | '/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddInstrumentRoute: typeof AddInstrumentRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  RegisterRoute: typeof RegisterRoute
  SettingsRoute: typeof SettingsRoute
  UnauthorizedRoute: typeof UnauthorizedRoute
  UpdateProfileRoute: typeof UpdateProfileRoute
  EnsemblesEnsembleIdRoute: typeof EnsemblesEnsembleIdRoute
  EnsemblesCreateEnsembleRoute: typeof EnsemblesCreateEnsembleRoute
  MusiciansSlugRoute: typeof MusiciansSlugRoute
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsCreatePostRoute: typeof PostsCreatePostRoute
  EnsemblesIndexRoute: typeof EnsemblesIndexRoute
  MusiciansIndexRoute: typeof MusiciansIndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddInstrumentRoute: AddInstrumentRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  RegisterRoute: RegisterRoute,
  SettingsRoute: SettingsRoute,
  UnauthorizedRoute: UnauthorizedRoute,
  UpdateProfileRoute: UpdateProfileRoute,
  EnsemblesEnsembleIdRoute: EnsemblesEnsembleIdRoute,
  EnsemblesCreateEnsembleRoute: EnsemblesCreateEnsembleRoute,
  MusiciansSlugRoute: MusiciansSlugRoute,
  PostsPostIdRoute: PostsPostIdRoute,
  PostsCreatePostRoute: PostsCreatePostRoute,
  EnsemblesIndexRoute: EnsemblesIndexRoute,
  MusiciansIndexRoute: MusiciansIndexRoute,
  PostsIndexRoute: PostsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/add-instrument",
        "/login",
        "/profile",
        "/register",
        "/settings",
        "/unauthorized",
        "/update-profile",
        "/ensembles/$ensembleId",
        "/ensembles/create-ensemble",
        "/musicians/$slug",
        "/posts/$postId",
        "/posts/create-post",
        "/ensembles/",
        "/musicians/",
        "/posts/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/add-instrument": {
      "filePath": "add-instrument.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/profile": {
      "filePath": "profile.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/unauthorized": {
      "filePath": "unauthorized.tsx"
    },
    "/update-profile": {
      "filePath": "update-profile.tsx"
    },
    "/ensembles/$ensembleId": {
      "filePath": "ensembles/$ensembleId.tsx"
    },
    "/ensembles/create-ensemble": {
      "filePath": "ensembles/create-ensemble.tsx"
    },
    "/musicians/$slug": {
      "filePath": "musicians/$slug.tsx"
    },
    "/posts/$postId": {
      "filePath": "posts/$postId.tsx"
    },
    "/posts/create-post": {
      "filePath": "posts/create-post.tsx"
    },
    "/ensembles/": {
      "filePath": "ensembles/index.tsx"
    },
    "/musicians/": {
      "filePath": "musicians/index.tsx"
    },
    "/posts/": {
      "filePath": "posts/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
